name: Live Scoreboard Refresh

on:
  # üèà Schedule (UTC times)
  schedule:
    # Thursday nights (8PM‚ÄìMidnight ET ‚Üí Fri 00‚Äì04 UTC), every 15 minutes
    - cron: "*/15 0-3 * * FRI"

    # Sunday (1PM‚ÄìMidnight ET ‚Üí Sun 17‚Äì23 UTC, Mon 00‚Äì04 UTC), every 15 minutes
    - cron: "*/15 17-23 * * SUN"
    - cron: "*/15 0-3 * * MON"

    # Monday nights (8PM‚ÄìMidnight ET ‚Üí Tue 00‚Äì04 UTC), every 5 minutes
    - cron: "*/5 0-3 * * TUE"

  # Allow manual runs anytime
  workflow_dispatch:

permissions:
  contents: write

# Prevent overlapping runs if one is still executing
concurrency:
  group: live-scoreboard-refresh
  cancel-in-progress: true

jobs:
  refresh:
    runs-on: ubuntu-latest

    steps:
      # --------------------------------------------------------
      # üóìÔ∏è Step 1: Skip workflow if outside NFL season (Sep 1‚ÄìJan 15)
      # --------------------------------------------------------
      - name: Check if current date is within NFL season
        id: season_check
        run: |
          TODAY=$(date -u +%Y-%m-%d)
          MONTH=$(date -u +%m)
          DAY=$(date -u +%d)
          RUN_SEASON=false

          # Allow Sep‚ÄìDec
          if [ $MONTH -ge 9 ] && [ $MONTH -le 12 ]; then
            RUN_SEASON=true
          fi

          # Allow Jan 1‚Äì15
          if [ $MONTH -eq 1 ] && [ $DAY -le 15 ]; then
            RUN_SEASON=true
          fi

          if [ "$RUN_SEASON" = "false" ]; then
            echo "‚ö†Ô∏è $TODAY is outside NFL season. Skipping workflow."
            echo "IN_SEASON=false" >> $GITHUB_ENV
            exit 0
          else
            echo "üèà NFL season active ($TODAY). Continuing..."
            echo "IN_SEASON=true" >> $GITHUB_ENV
          fi

      - name: Skip notice (offseason)
        if: env.IN_SEASON != 'true'
        run: echo "üõë Skipping job (offseason months)."

      # --------------------------------------------------------
      # üß∞ Step 2: Standard setup
      # --------------------------------------------------------
      - name: Checkout repo
        if: env.IN_SEASON == 'true'
        uses: actions/checkout@v4

      - name: Set up Python
        if: env.IN_SEASON == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        if: env.IN_SEASON == 'true'
        run: pip install pandas requests jq

      - name: Cron heartbeat
        if: env.IN_SEASON == 'true'
        run: |
          echo "‚è∞ Cron fired at: $(date -u +'%Y-%m-%d %H:%M:%S') UTC"
          echo "Tip: UTC = ET + 4 (during Daylight Time)."

      # --------------------------------------------------------
      # üèà Step 3: Check game status
      # --------------------------------------------------------
      - name: Check if games are active
        if: env.IN_SEASON == 'true'
        id: gamestatus
        run: python NFLgameStatus.py
        continue-on-error: true  # exit 1 = no games, exit 2 = error

      - name: Parse NFL status JSON
        if: env.IN_SEASON == 'true' && always()
        run: |
          if [ -f "nfl_status.json" ]; then
            WEEK_NUM=$(jq -r '.week_number' nfl_status.json)
            GAMES_ACTIVE=$(jq -r '.games_active' nfl_status.json)
            echo "WEEK_NUM=$WEEK_NUM" >> $GITHUB_ENV
            echo "GAMES_ACTIVE=$GAMES_ACTIVE" >> $GITHUB_ENV
            echo "üìÖ Week: $WEEK_NUM | üèà Games active: $GAMES_ACTIVE"
          else
            echo "‚ö†Ô∏è nfl_status.json not found ‚Äî likely API error."
            echo "GAMES_ACTIVE=false" >> $GITHUB_ENV
          fi

      # --------------------------------------------------------
      # ‚è∏Ô∏è Step 4: Skip if no active games
      # --------------------------------------------------------
      - name: Skip if no active games
        if: env.GAMES_ACTIVE != 'true'
        run: echo "üò¥ No live games right now. Skipping score refresh."

      # --------------------------------------------------------
      # üîÑ Step 5: Refresh data if games are active
      # --------------------------------------------------------
      - name: Refresh Scores for active week
        if: env.GAMES_ACTIVE == 'true'
        run: python score_details.py --week $WEEK_NUM

      # --------------------------------------------------------
      # üíæ Step 6: Commit updated CSV + timestamps
      # --------------------------------------------------------
      - name: Commit updated data
        if: env.GAMES_ACTIVE == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add data/Scores.csv data/LastUpdate.csv || true
          git commit -m "Auto update live scores (Week $WEEK_NUM)" || echo "No changes to commit"
          git push || echo "Nothing to push"

      # --------------------------------------------------------
      # üöÄ Step 7: Trigger Power BI refresh
      # --------------------------------------------------------
      - name: Trigger Power BI dataset refresh
        if: env.GAMES_ACTIVE == 'true'
        env:
          TENANT_ID: ${{ secrets.PBI_TENANT_ID }}
          CLIENT_ID: ${{ secrets.PBI_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.PBI_CLIENT_SECRET }}
          WORKSPACE_ID: ${{ secrets.PBI_WORKSPACE_ID }}
          DATASET_ID: ${{ secrets.PBI_DATASET_ID }}
        run: |
          echo "üîê Getting Power BI access token..."
          TOKEN=$(curl -s -X POST "https://login.microsoftonline.com/$TENANT_ID/oauth2/v2.0/token" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=client_credentials&client_id=$CLIENT_ID&client_secret=$CLIENT_SECRET&scope=https://analysis.windows.net/powerbi/api/.default" \
            | jq -r '.access_token')

          echo "üöÄ Triggering dataset refresh in Power BI..."
          RESPONSE=$(curl -s -w "%{http_code}" -o /dev/null -X POST \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json" \
            "https://api.powerbi.com/v1.0/myorg/groups/$WORKSPACE_ID/datasets/$DATASET_ID/refreshes")

          if [ "$RESPONSE" = "202" ]; then
            echo "‚úÖ Power BI refresh queued"
          else
            echo "‚ö†Ô∏è Power BI refresh returned status $RESPONSE"
          fi
