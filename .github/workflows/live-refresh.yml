name: Live Scoreboard Refresh

on:
  schedule:
    - cron: "*/10 * * * *"   # every 10 minutes
  workflow_dispatch:          # allows manual trigger

jobs:
  refresh:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install pandas requests jq

      # -------------------------------
      # 1Ô∏è‚É£ Check current game status
      # -------------------------------
      - name: Check if games are active
        id: gamestatus
        run: python NFLgameStatus.py

      # -------------------------------
      # 2Ô∏è‚É£ Extract week number from JSON
      # -------------------------------
      - name: Read NFL week number
        if: ${{ success() }}
        id: week
        run: echo "WEEK_NUM=$(jq -r '.week_number' nfl_status.json)" >> $GITHUB_ENV

      # -------------------------------
      # 3Ô∏è‚É£ Refresh scores for active week only
      # -------------------------------
      - name: Refresh Scores for active week
        if: ${{ success() }}
        run: python score_details.py --week $WEEK_NUM

      # -------------------------------
      # 4Ô∏è‚É£ Commit updated CSV
      # -------------------------------
      - name: Commit updated Scores.csv
        if: ${{ success() }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add data/Scores.csv
          git commit -m "Auto update live scores (Week $WEEK_NUM)"
          git push

      # -------------------------------
      # 5Ô∏è‚É£ Trigger Power BI refresh
      # -------------------------------
      - name: Trigger Power BI dataset refresh
        if: ${{ success() }}
        env:
          TENANT_ID: ${{ secrets.PBI_TENANT_ID }}
          CLIENT_ID: ${{ secrets.PBI_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.PBI_CLIENT_SECRET }}
          WORKSPACE_ID: ${{ secrets.PBI_WORKSPACE_ID }}
          DATASET_ID: ${{ secrets.PBI_DATASET_ID }}
        run: |
          echo "üîê Getting Power BI access token via MSAL..."
          TOKEN=$(curl -s -X POST "https://login.microsoftonline.com/$TENANT_ID/oauth2/v2.0/token" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=client_credentials&client_id=$CLIENT_ID&client_secret=$CLIENT_SECRET&scope=https://analysis.windows.net/powerbi/api/.default" \
            | jq -r '.access_token')

          echo "üöÄ Triggering dataset refresh in Power BI..."
          RESPONSE=$(curl -s -w "%{http_code}" -o /dev/null -X POST \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json" \
            "https://api.powerbi.com/v1.0/myorg/groups/$WORKSPACE_ID/datasets/$DATASET_ID/refreshes")

          if [ "$RESPONSE" = "202" ]; then
            echo "‚úÖ Power BI refresh triggered successfully!"
          else
            echo "‚ö†Ô∏è Power BI refresh returned status $RESPONSE"
          fi
