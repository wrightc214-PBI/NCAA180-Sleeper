name: Live Scoreboard Refresh

on:
  # Runs at the top of every hour (UTC)
  schedule:
    - cron: "0 * * * *"
  # Manual run
  workflow_dispatch:

permissions:
  contents: write

# Prevent overlapping runs if one is still going
concurrency:
  group: live-scoreboard-refresh
  cancel-in-progress: true

jobs:
  refresh:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install pandas requests jq

      # Heartbeat log
      - name: Cron heartbeat
        run: |
          echo "‚è∞ Cron fired at: $(date -u +'%Y-%m-%d %H:%M:%S') UTC"
          echo "Tip: UTC = ET + 4 (during Daylight Time)."

      # 1Ô∏è‚É£ Check NFL game status
      - name: Check if games are active
        id: gamestatus
        run: python NFLgameStatus.py
        continue-on-error: true  # Prevent workflow failure on exit 1 (no games)

      # 2Ô∏è‚É£ Parse game status JSON regardless of exit code
      - name: Parse NFL status JSON
        if: always()
        run: |
          if [ -f "nfl_status.json" ]; then
            WEEK_NUM=$(jq -r '.week_number' nfl_status.json)
            GAMES_ACTIVE=$(jq -r '.games_active' nfl_status.json)
            echo "WEEK_NUM=$WEEK_NUM" >> $GITHUB_ENV
            echo "GAMES_ACTIVE=$GAMES_ACTIVE" >> $GITHUB_ENV
            echo "üìÖ Week: $WEEK_NUM | üèà Games active: $GAMES_ACTIVE"
          else
            echo "‚ö†Ô∏è nfl_status.json not found ‚Äî likely an API error."
            echo "GAMES_ACTIVE=false" >> $GITHUB_ENV
            exit 2
          fi

      # 3Ô∏è‚É£ Stop early if no active games
      - name: Skip if no active games
        if: env.GAMES_ACTIVE != 'true'
        run: echo "üïí No live games ‚Äî skipping score refresh."
        
      # 4Ô∏è‚É£ Refresh Scores (only if games are active)
      - name: Refresh Scores for active week
        if: env.GAMES_ACTIVE == 'true'
        run: python score_details.py --week $WEEK_NUM

      # 5Ô∏è‚É£ Commit updated CSV + timestamp (only if games are active)
      - name: Commit updated data
        if: env.GAMES_ACTIVE == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add data/Scores.csv data/LastUpdate.csv || true
          git commit -m "Auto update live scores (Week $WEEK_NUM)" || echo "No changes to commit"
          git push || echo "Nothing to push"

      # 6Ô∏è‚É£ Trigger Power BI refresh (only if games are active)
      - name: Trigger Power BI dataset refresh
        if: env.GAMES_ACTIVE == 'true'
        env:
          TENANT_ID: ${{ secrets.PBI_TENANT_ID }}
          CLIENT_ID: ${{ secrets.PBI_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.PBI_CLIENT_SECRET }}
          WORKSPACE_ID: ${{ secrets.PBI_WORKSPACE_ID }}
          DATASET_ID: ${{ secrets.PBI_DATASET_ID }}
        run: |
          echo "üîê Getting Power BI access token via MSAL..."
          TOKEN=$(curl -s -X POST "https://login.microsoftonline.com/$TENANT_ID/oauth2/v2.0/token" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=client_credentials&client_id=$CLIENT_ID&client_secret=$CLIENT_SECRET&scope=https://analysis.windows.net/powerbi/api/.default" \
            | jq -r '.access_token')

          echo "üöÄ Triggering dataset refresh in Power BI..."
          RESPONSE=$(curl -s -w "%{http_code}" -o /dev/null -X POST \
            -H "Authorization: Bearer $TOKEN" \
            -H "Content-Type: application/json" \
            "https://api.powerbi.com/v1.0/myorg/groups/$WORKSPACE_ID/datasets/$DATASET_ID/refreshes")

          if [ "$RESPONSE" = "202" ]; then
            echo "‚úÖ Power BI refresh queued"
          else
            echo "‚ö†Ô∏è Power BI refresh returned status $RESPONSE"
          fi
